{# {% extends 'baseback.html.twig' %} #}

{% block body %}
<style>
    .form-container {
        width: 50%;
        margin: 0 auto;
    }

    .field-container {
        background-color: #f5f5f5;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 15px; /* Add space between each field container */
    }

    .error-message {
        color: red;
    }

    /* Style form labels */
    .form-label {
        font-weight: bold;
    }

    /* Style form widgets */
    .form-widget {
        width: 100%; /* Ensure widgets take up full width of their container */
        padding: 5px;
        border-radius: 5px;
        border: 1px solid #ccc; /* Add a border for better visual separation */
    }

    /* Style submit button */
    .btn {
        background-color: #28a745;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
    }

    /* Style button on hover */
    .btn:hover {
        background-color: #218838;
    }
</style>

<div class="form-container">
    <div class="field-container">
        {{ form_start(form) }}
        {% for field in form %}
            <div>
                <label class="form-label">{{ form_label(field) }}</label>
                {{ form_widget(field, {'attr': {'class': 'form-widget'}}) }}
                {% if field.vars.errors|length > 0 %}
                    <div class="error-message">
                        {% for error in field.vars.errors %}
                            {{ error.message }}
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
        {% endfor %}
      
        <button type="submit" class="btn">{{ button_label|default('Pay Now') }}</button>
        {{ form_end(form) }}
    </div>
    <div id="card-element" class="form-control"></div>
      <div id="card-errors" role="alert"></div>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
 // Retrieve idPanier from local storage
var idPanier = parseInt(localStorage.getItem('id_panier'));
var totalAmount = parseInt(localStorage.getItem('totalAmount'));

// Ensure idPanier is not null or undefined
if (isNaN(idPanier)) {
    console.error('idPanier not found in local storage or is not a valid number');
}

var stripe = Stripe('pk_test_51OquviDCmW43ltvEUIKRoupS8LbEmm5PyJak13CKuOAPXAlbelMuv4jwXTIidRgu0LlsUm9CGcXZdjeZhOT505x700DjgNkr1B');
var elements = stripe.elements(); // Initialize Stripe Elements

// Create card element outside the event listener
var cardElement = elements.create('card');
cardElement.mount('#card-element');

var form = document.querySelector('form');
form.addEventListener('submit', function(event) {
    event.preventDefault();

    // Check if the card details are valid
    stripe.createToken(cardElement).then(function(result) {
        if (result.error) {
            // Inform the user if there was an error
            var errorElement = document.getElementById('card-errors');
            errorElement.textContent = result.error.message;
        } else {
            // Token creation was successful, proceed with using the token
            var token = result.token.id; // Retrieve the token ID from the result
            console.log('Token ID:', token);

            // Include the token in the form data before submitting
            var formData = new FormData(form);
            formData.append('token', token);
            formData.append('totalAmount', totalAmount);

            // Log the formData to verify if the token is included
            console.log('Form Data:', formData);

            // Display formData entries for debugging
            for (var pair of formData.entries()) {
                console.log(pair[0] + ', ' + pair[1]);
            }

            // Send the form data to the backend
            fetch('/addfacture/user/' + idPanier, {
    method: 'POST',
    body: formData
})
.then(response => {
    if (response.ok) {
       
        // Redirect to the desired URL
        //window.location.href = '/userEnchere';
    } else {
        // Handle error
        console.error('Error:', response.statusText);
    }
})
.catch(error => {
    console.error('Error:', error);
});

        }
    });
});


</script>



{% endblock %}
